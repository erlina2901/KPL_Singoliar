upplied collection that correspond to O-Space types.
    /// </summary>
    public IEnumerable<string> GetAllGlobalItems(EdmItemCollection itemCollection)
    {
        return itemCollection.GetItems<GlobalItem>().Where(i => i is EntityType || i is ComplexType || i is EnumType || i is EntityContainer).Select(g => GetGlobalItemName(g));
    }

    /// <summary>
    /// Returns the name of the supplied GlobalItem.
    /// </summary>
    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    /// <summary>
    /// Retuns as full of a name as possible, if a namespace is provided
    /// the namespace and name are combined with a period, otherwise just
    /// the name is returned.
    /// </summary>
    public string CreateFullName(string namespaceName, string name)
    {
        if (String.IsNullOrEmpty(namespaceName))
        {
            return name;
        }

        return namespaceName + "." + name;
    }

    /// <summary>
    /// Retuns a literal representing the supplied value.
    /// </summary>
    public string CreateLiteral(object value)
    {
        if (value == null)
        {
            return string.Empty;
        }

        Type type = value.GetType();
        if (type.IsEnum)
        {
            return type.FullName + "." + value.ToString();
        }
        if (type == typeof(Guid))
        {
            return string.Format(CultureInfo.InvariantCulture, "new Guid(\"{0}\")",
                                 ((Guid)value).ToString("D", CultureInfo.InvariantCulture));
        }
        else if (type == typeof(DateTime))
        {
            return string.Format(CultureInfo.InvariantCulture, "new DateTime({0}, DateTimeKind.Unspecified)",
                                 ((DateTime)value).Ticks);
        }
        else if (type == typeof(byte[]))
        {
            var arrayInit = string.Join(", ", ((byte[])value).Select(b => b.ToString(CultureInfo.InvariantCulture)).ToArray());
            return string.Format(CultureInfo.InvariantCulture, "new Byte[] {{{0}}}", arrayInit);
        }
        else if (type == typeof(DateTimeOffset))
        {
            var dto = (DateTimeOffset)value;
            return string.Format(CultureInfo.InvariantCulture, "new DateTimeOffset({0}, new TimeSpan({1}))",
                                 dto.Ticks, dto.Offset.Ticks);
        }
        else if (type == typeof(TimeSpan))
        {
            return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})",
                                 ((TimeSpan)value).Ticks);
        }

        var expression = new CodePrimitiveExpression(value);
        var writer = new StringWriter();
        CSharpCodeProvider code = new CSharpCodeProvider();
        code.GenerateCodeFromExpression(expression, writer, new CodeGeneratorOptions());
        return writer.ToString();
    }

    /// <summary>
    /// Returns a resource string from the System.Data.Entity.Design assembly.
    /// </summary>
    public static string GetResourceString(string resourceName, CultureInfo culture = null)
    {
        if(_resourceManager == null)
        {
            _resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design",
                typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
        }

        return _resourceManager.GetString(resourceName, culture);
    }
    static System.Resources.ResourceManager _resourceManager;

    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    /// <summary>
    /// Gets the entity, complex, or enum types for which code should be generated from the given item collection.
    /// Any types for which an ExternalTypeName annotation has been applied in the conceptual model
    /// metadata (CSDL) are filtered out of the returned list.
    /// </summary>
    /// <typeparam name="T">The type of item to return.</typeparam>
    /// <param name="itemCollection">The item collection to look in.</param>
    /// <returns>The items to generate.</returns>
    public IEnumerable<T> GetItemsToGenerate<T>(ItemCollection itemCollection) where T: GlobalItem
    {
        return itemCollection.GetItems<T>().Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName));
    }

    /// <summary>
    /// Returns the escaped type name to use for the given usage of a c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    /// <summary>
    /// Returns the escaped type name to use for the given usage of an c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="typeUsage">The c-space type usage to get a name for.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    /// <summary>
    /// Returns the escaped type name to use for the given c-space type in o-space. This might be
    /// an external type name if the ExternalTypeName annotation has been specified in the
    /// conceptual model metadata (CSDL).
    /// </summary>
    /// <param name="edmType">The c-space type to get a name for.</param>
    /// <param name="isNullable">Set this to true for nullable usage of this type.</param>
    /// <param name="modelNamespace">If not null and the type's namespace does not match this namespace, then a
    /// fully qualified name will be returned.</param>
    /// <returns>The type name to use.</returns>
    private string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        // Try to get an external type name, and if that is null, then try to get escape the name from metadata,
        // possibly namespace-qualifying it.
        var typeName = Escape(edmType.MetadataProperties
                              .Where(p => p.Name == ExternalTypeNameAttributeName)
                              .Select(p => (string)p.Value)
                              .FirstOrDefault())
            ??
            (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
             CreateFullName(EscapeNamespace(edmType.NamespaceName), Escape(edmType)) :
             Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = _ef.UnderlyingClrType(edmType);
            if (!(edmType is EnumType))
            {
                typeName = Escape(clrType);
            }

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("typeUsage");
    }
}

/// <summary>
/// Responsible for making the Entity Framework Metadata more
/// accessible for code generation.
/// </summary>
public class MetadataTools
{
    private readonly DynamicTextTransformation _textTransformation;

    /// <summary>
    /// Initializes an MetadataTools Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    public MetadataTools(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }

        _textTransformation = DynamicTextTransformation.Create(textTransformation);
    }

    /// <summary>
    /// This method returns the underlying CLR type of the o-space type corresponding to the supplied <paramref name="typeUsage"/>
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// </summary>
    public Type ClrType(TypeUsage typeUsage)
    {
        return UnderlyingClrType(typeUsage.EdmType);
    }

    /// <summary>
    /// This method returns the underlying CLR type given the c-space type.
    /// Note that for an enum type this means that the type backing the enum will be returned, not the enum type itself.
    /// </summary>
    public Type UnderlyingClrType(EdmType edmType)
    {
        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        var enumType = edmType as EnumType;
        if (enumType != null)
        {
       